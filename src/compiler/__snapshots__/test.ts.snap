// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler compile(template.async.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: template.async.ets
 */
/* eslint-disable */

interface Props {
  promise: Promise<string>;
}

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default async function (props: Props): Promise<string> {
  const __sb = new __EtsStringBuilder();
  __sb.append("The promise resolves to: ");
  __sb.append((await props.promise).toString(), false);
  __sb.append(".\\n");
  return __sb.string;
}
"
`;

exports[`compiler compile(template-1.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: template-1.ets
 */
/* eslint-disable */

export interface Props {
  users: { name: string }[];
}

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default function (props: Props): string {
  const __sb = new __EtsStringBuilder();
  props.users.forEach(function (user) {
    __sb.glue();
    __sb.append("\\nName: ");
    __sb.append(user.name.toString(), false);
    __sb.append("\\n");
  });
  __sb.glue();
  __sb.append("\\n");
  return __sb.string;
}
"
`;

exports[`compiler compile(template-2.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: template-2.ets
 */
/* eslint-disable */

export interface Props {
  name: string;
  needsPasswordReset: boolean;
}

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default function (props: Props): string {
  const __sb = new __EtsStringBuilder();
  __sb.append("Hello ");
  __sb.append(props.name.toString(), false);
  __sb.append("!\\n");
  if (props.needsPasswordReset) {
    __sb.glue();
    __sb.append("\\nYou need to update your password.\\n");
  }
  __sb.glue();
  __sb.append("\\n");
  return __sb.string;
}
"
`;

exports[`compiler compile(template-3.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: template-3.ets
 */
/* eslint-disable */

type AccountType = "user" | "admin" | "enterprise";

export interface Props {
  name: string;
  type: AccountType;
}

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default function (props: Props): string {
  const __sb = new __EtsStringBuilder();
  __sb.append("Hello ");
  __sb.append(props.name.toString(), false);
  __sb.append(", you are ");
  __sb.glue();
  __sb.append("\\n");
  switch (props.type) {
    case "user":
      __sb.append("a user!");
      break;
    case "admin":
      __sb.append("an admin!");
      break;
    case "enterprise":
      __sb.append("an enterprise user!");
      break;
    default: {
      const exhaust: never = props.type;
      return exhaust;
    }
  }
  __sb.append("\\n");
  return __sb.string;
}
"
`;

exports[`compiler compile(template-4.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: template-4.ets
 */
/* eslint-disable */

import { uppercase } from "./helpers";

export interface Props {
  name: string;
}

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default function (props: Props): string {
  const __sb = new __EtsStringBuilder();
  __sb.append("Hello ");
  __sb.append(uppercase(props.name).toString(), false);
  __sb.append("!\\n");
  return __sb.string;
}
"
`;

exports[`compiler compile(template-5.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: template-5.ets
 */
/* eslint-disable */

type AccountType = "user" | "admin" | "enterprise";

export interface Props {
  name: string;
  type: AccountType;
}

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default function (props: Props): string {
  const __sb = new __EtsStringBuilder();
  let userMessage;
  switch (props.type) {
    case "user": {
      userMessage = "a user!";
      break;
    }
    case "admin": {
      userMessage = "an admin!";
      break;
    }
    case "enterprise": {
      userMessage = "an enterprise user!";
      break;
    }
    default: {
      const exhaust: never = props.type;
      return exhaust;
    }
  }
  __sb.glue();
  __sb.append("\\nHello ");
  __sb.append(props.name.toString(), false);
  __sb.append(", you are ");
  __sb.append(userMessage.toString(), false);
  __sb.append("\\n");
  return __sb.string;
}
"
`;

exports[`compiler compile(template-6.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: template-6.ets
 */
/* eslint-disable */

import renderUser, { Props as User } from "./user-partial.ets";

export interface Props {
  users: User[];
}

const example = \`1
2
3
4\`;

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default function (props: Props): string {
  const __sb = new __EtsStringBuilder();
  if (props.users.length > 0) {
    __sb.glue();
    __sb.append("\\nHere is a list of users:\\n");
    for (const user of props.users) {
      __sb.glue();
      __sb.append("\\n  ");
      __sb.append(renderUser(user).trimEnd().toString(), true);
      __sb.append("\\n");
    }
    __sb.append("\\n");
  }
  __sb.glue();
  __sb.append(
    "\\nThe indentation level is preserved for the rendered 'partial'.\\n\\nThere isn't anything special about the 'partial'. Here we used another ets template, but any\\nexpression yeilding a multiline string would be treated the same.\\n\\n  "
  );
  __sb.append(example.toString(), true);
  __sb.append("\\n\\nThe end!\\n");
  return __sb.string;
}
"
`;

exports[`compiler compile(user-partial.ets) 1`] = `
"/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run \`npx ets\` or \`yarn ets\` to regenerate this file.
 * Source: user-partial.ets
 */
/* eslint-disable */

export interface Props {
  name: string;
  email: string;
  phone: string;
}

class __EtsStringBuilder {
  string: string = "";
  isGlue: boolean = false;
  glue() {
    this.isGlue = true;
  }
  append(string: string, preserveIndent: boolean = false) {
    if (this.isGlue && string.startsWith("\\n")) {
      string = string.slice(1);
    }
    if (preserveIndent) {
      const indent = this.indent;
      const parts = string.split("\\n");
      this.string += parts[0];
      for (const part of parts.slice(1)) {
        this.string += "\\n" + " ".repeat(indent) + part;
      }
    } else {
      this.string += string;
    }
    this.isGlue = false;
  }
  get indent() {
    const parts = this.string.split("\\n");
    return parts[parts.length - 1].length;
  }
}

export default function (props: Props): string {
  const __sb = new __EtsStringBuilder();
  __sb.append("Name: ");
  __sb.append(props.name.toString(), false);
  __sb.append("\\nEmail: ");
  __sb.append(props.email.toString(), false);
  __sb.append("\\nPhone: ");
  __sb.append(props.phone.toString(), false);
  __sb.append("\\n");
  return __sb.string;
}
"
`;
